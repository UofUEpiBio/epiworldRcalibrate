---
title: "<span style='color:black;'>Introduction to epiworldRcalibrate package</span>"
author: "<span style='color:#800080;'>Sima Najafzadehkhoei</span>"
format: 
  revealjs:
    scrollable: true
    transition: slide
    slide-number: true
    show-slide-number: print
    footer: |
      <div style="text-align: right;">
        <span style="color:#8B0000;">sima.njf@utah.edu
      </div>
 # Disable the default footer to add custom content
editor: visual
slide-number: true
show-slide-number: print
---

# [Welcome to **epiworldRcalibrate** 🌍📊]{style="font-size: 60px;"}

[Use epiworldRcalibrate to unlock the potential of simulation-based learning!]{style="font-size: 30px;"}

[**This Package Offers Two Key Capabilities**:]{style="font-size: 30px;"}

[1️⃣🚀 Simulate the Calibration Process:]{style="font-size: 30px; font-weight: bold;"}[Visualize how parameters affect outcomes.]{style="font-size: 20px;"}

[2️⃣🎯 Provide Your Data:]{style="font-size: 30px; font-weight: bold;"} [Automatically determine model parameters using cutting-edge machine learning.]{style="font-size: 20px;"}

[🔍 **Perfect for Epidemiologists, Data Scientists, and Researchers!**\
🛠️ Tools built on **R, TensorFlow, and Keras** ensure high performance.]{style="font-size: 20px;"}

``` r
install.packages("epiworldRcalibrate")
library(epiworldRcalibrate)
```

------------------------------------------------------------------------

### What we have done so far? 🦠📈

```{r, echo=FALSE, fig.align='center', out.width="180%"}
knitr::include_graphics("~/epiworldRcalibrate/epiworldRcalibrate/misc/plan.jpg")
```

<div style="display: flex; align-items: flex-start; gap: 15px;">

<!-- Left Table -->

::: {style="font-size: 12px; line-height: 1; width: 50%; text-align: left; border: 1px solid #ddd; padding: 10px; border-radius: 3px; background-color: #f9f9f9;"}
### 🛠️ **States of the SIR Model**

| **State** | **Description**                        |
|-----------|----------------------------------------|
| 🟢 **S**  | Susceptible (population at risk)       |
| 🔴 **I**  | Infected (currently sick individuals)  |
| 🔵 **R**  | Recovered (or removed from the system) |
:::

<!-- Right Table -->

::: {style="font-size: 12px; line-height: 1; width: 50%; text-align: left; border: 1px solid #ddd; padding: 8px; border-radius: 3px; background-color: #f9f9f9;"}
### 📊 **Model Parameters**

| **Parameter**            | **Description**                                 |
|--------------------------|----------------------------------------------|
| 🤝 **Contact Rate**      | Number of contacts per individual per unit time |
| 💉 **Transmission Rate** | Probability of disease transmission per contact |
| 📈 **Prevalence**        | Proportion of the population currently infected |
| 🛌 **Recovery Rate**     | Rate at which infected individuals recover      |
:::

# 🚀🎯 epiworldRcalibrate

our Ultimate Tool for Epidemic Insights

```{r, echo=FALSE, fig.align='center'}
knitr::include_graphics("~/epiworldRcalibrate/epiworldRcalibrate/misc/epiworldRcalibrate_scenario.jpg")
```

# 🚀 Simulate and calibrate SIR Function

``` {.r .smaller}
N = 2e4
n = 5000
ndays = 50
epochs = 100
ncores = 20
verbose = 2
simulate_calibrate_sir(N, n, ndays, ncores, epochs, verbose)
```

::: {.columns style="font-size:15px;"}
::: {.column width="40%"}
🎯 [**What Does This Function Do?**]{style="color: #4CAF50;"}

1️⃣ [**Data Generation:**]{style="color: #2196F3;"} Create realistic epidemic scenarios

2️⃣ [**Simulation:**]{style="color: #FFC107;"} Model the spread of disease over time

3️⃣ [**Model Training:**]{style="color: #9C27B0;"} Use CNNs for best-fitting parameters

4️⃣ [**Evaluation:**]{style="color: #FF5722;"} Assess performance (e.g., MAE)

5️⃣ [**Visualization:**]{style="color: #673AB7;"} Generate intuitive plots
:::

::: {.column width="60%"}
| [Category]{style="color: #4CAF50;"}              | [Parameter]{style="color: #2196F3;"} | [Description]{style="color: #FFC107;"}           | [Example]{style="color: #9C27B0;"} |
|-------------------|-----------------|-------------------|-----------------|
| [**Simulation Inputs**]{style="color: #4CAF50;"} | N                                    | Total number of simulations to run.              | 20,000                             |
|                                                  | n                                    | Population size for each simulation.             | 5,000                              |
|                                                  | ndays                                | Duration of the simulation in days.              | 50                                 |
|                                                  | ncores                               | Number of cores for parallel processing.         | 20                                 |
| [**Model Training**]{style="color: #FF5722;"}    | epochs                               | Number of training iterations for the CNN model. | 100                                |
| [**Inputs**]{style="color: #FFC107;"}            | verbose                              | Level of detail in the training output.          |                                    |
:::
:::

## 🌟 Going Deep into the Function

::: columns
::: {.column width="60%"}
```{=html}
<pre><code id="code-block">
simulate_calibrate_sir <- function(N, n, ndays, ncores, epochs, verbose) {
  theta <- generate_theta(N, n)
  seeds <- sample.int(.Machine$integer.max, N, TRUE)
  
  matrices <- run_simulations(N, n, ndays, ncores, theta, seeds)

  filtered_data <- filter_non_null(matrices, theta)
  matrices <- filtered_data$matrices
  theta <- filtered_data$theta
  N <- filtered_data$N

  arrays_1d <- prepare_data_for_tensorflow(matrices, N)

  theta2 <- data.table::as.data.table(data.table::copy(theta))
  theta2$crate <- stats::plogis(theta2$crate / 10)

  data_split <- split_data(arrays_1d, theta2, N)
  train <- data_split$train
  test <- data_split$test

  model <- build_cnn_model(dim(arrays_1d)[-1], ncol(theta2))
  train_model(model, train, epochs = epochs, verbose = verbose)

  eval_results <- evaluate_model(model, test, theta)
  pred <- eval_results$pred
  MAEs <- eval_results$MAEs

  plot_results(pred, test, theta, MAEs, N, floor(N * 0.7))
  return(list(pred = pred, MAEs = MAEs))
}
</code></pre>
```
:::

::: {.column width="40%"}
###### 🎥 Video Example:

<iframe src="https://drive.google.com/file/d/1O4S4RqJPBQAZF_0MYK5n98yQevXyYZyg/preview" width="100%" height="500" frameborder="0" allowfullscreen>

</iframe>
:::
:::

```{=html}
<script>
const allLines = document.querySelector("#code-block").innerHTML.split("\n");
let currentIndex = 0;

// Function to highlight next line
function highlightNextLine() {
  const codeBlock = document.querySelector("#code-block");
  const newLines = allLines.map((line, index) => {
    if (index === currentIndex && !line.trim().startsWith("#")) {
      return `<span style="background-color: #3b82f6; color: white; display: inline-block; width: 100%; border-radius: 5px; padding: 2px;">${line}</span>`;
    }
    return line;
  });
  codeBlock.innerHTML = newLines.join("\n");
  if (currentIndex < allLines.length - 1) {
    currentIndex++;
  }
}

// Trigger highlighting on Enter key press
document.addEventListener("keydown", function (event) {
  if (event.key === "Enter") {
    highlightNextLine();
  }
});
</script>
```

## 🎯 Empower Yourself: Perform Your Own Calibration:
Model Calibration Made Easy 🎯🤖

::: columns
::: {.column width="50%" style="font-size: 20px;"}
### 🔍 Calibrate Parameters:

1️⃣ **Input Your Data**: Provide real-world or simulated SIR data.

2️⃣ **CNN Prediction**: The pre-trained model predicts:\
- **Prevalence**: How widespread is the infection?\
- **Case Rate**: How quickly are cases rising?\
- **Transmission Probability**: How infectious is the disease?\
- **Recovery Rate**:Rate at which infected individuals recover

### 🔧 Smart Model Selection:

-   Automatically detects if 30 or 60 models should be used for the input data.
-   Loads the correct pre-trained model for optimal predictions.
:::

::: {.column width="50%"}
```{r, echo=FALSE, fig.align='center', out.width="100%"}
knitr::include_graphics("~/epiworldRcalibrate/epiworldRcalibrate/misc/flowchart_calibrate_sir.jpg")
```
:::
:::

``` r
N=1
n=5000
set.seed(123)
theta <- generate_theta(N, n)
ncores=20
ndays=60
seeds=123

# Run simulations
i=1
m <- epiworldR:: ModelSIRCONN(
  "mycon",
  prevalence        = theta$preval[i],
  contact_rate      = theta$crate[i],
  transmission_rate = theta$ptran[i],
  recovery_rate     = theta$prec[i],
  n                 = n
)
verbose_off(m)
run(m, ndays = ndays)
incidence = epiworldR::plot_incidence(m, plot = FALSE)
data=incidence$Infected
result=calibrate_sir(data)
```

## Results:

### [SIR Model Actual vs Predicted Table]{style="font-size: 20px;"}

|               | Prevalence | Contact Rate (crate) | Transmission Rate (ptran) | Recovery Rate (prec) |
|--------------|--------------|--------------|---------------|--------------|
| **Actual**    | 0.11900    | 0.64784              | 0.07971                   | 0.54576              |
| **Predicted** | 0.22479    | 0.60218              | 0.22618                   | 0.54581              |
| **MAE**       | 0.10579    | 0.04566              | 0.14647                   | 0.00005              |

## [📊 Visualizing SIR Model Results: Actual vs Predicted Parameters]{style="font-size: 40px;"}

```{r, echo=FALSE, fig.align='center', out.width="180%"}
knitr::include_graphics("~/epiworldRcalibrate/epiworldRcalibrate/misc/plots.png")
```

## 🙏 Thank You!

::: {style="text-align: center; font-size: 36px; color: #4CAF50; margin-top: 50px;"}
<p><strong>Thank You for Your Attention!</strong></p>

<p style="font-size: 20px; color: #555;">

Questions? Feel free to ask! 😊

</p>
:::

::: {style="text-align: center; font-size: 16px; color: #888; margin-top: 30px;"}
<p>Advanced R Programming</p>

<p>Population Health Sciences, University of Utah</p>
:::
