library(myfirst.package)
library(myfirst.package)
main_pipeline(2000,500,50,20)
library(myfirst.package)
main_pipeline(2000,500,50,20)
devtools::load_all()
main_pipeline(2000,500,50,20)
library(myfirst.package)
main_pipeline(2000,500,50,20)
generate_theta(2000,500)
generate_theta(20000,500)
N     <- 2e4
n     <- 5000
ndays <- 50
ncores <- 20
generate_theta(N,n)
theta=generate_theta(N,n)
run_simulations(N,n,ndays,ncores,seeds=121)
library(myfirst.package)
library(myfirst.package)
run_simulations(N,n,ndays,ncores,seeds= sample.int(.Machine$integer.max, N, TRUE))
N     <- 2e4
n     <- 5000
ndays <- 50
ncores <- 20
theta=generate_theta(N,n)
run_simulations(N,n,ndays,ncores,theta,seeds <- sample.int(.Machine$integer.max, N, TRUE))
theta
set.seed(seeds[1])
m <- theta[1, ModelSIRCONN(
"mycon",
prevalence        = preval,
contact_rate      = crate,
transmission_rate = ptran,
recovery_rate     = prec,
n                 = n
)]
verbose_off(m)
run(m, ndays = ndays)
ans <- myfirst.package::prepare_data(m)  # Explicit namespace
ans
run_simulations(N,n,ndays,ncores,theta,seeds <- sample.int(.Machine$integer.max, N, TRUE))
library(myfirst.package)
run_simulations(N,n,ndays,ncores,theta,seeds <- sample.int(.Machine$integer.max, N, TRUE))
library(myfirst.package)
run_simulations(N,n,ndays,ncores,theta,seeds <- sample.int(.Machine$integer.max, N, TRUE))
library(myfirst.package)
library(myfirst.package)
library(myfirst.package)
library(epiwroldRcalibrate)
#' Generate Theta Parameters for SIR Model Simulation
#'
#' @description
#' Generates a data table of parameters needed to simulate SIR models.
#'
#' @param N Integer. The number of parameter sets to generate.
#' @param n Integer. The population size for each simulation.
#' @return A data.table containing the generated parameters.
#' @export
generate_theta <- function(N, n) {
library(data.table)
set.seed(1231)
theta <- data.table(
preval = sample((100:2000) / n, N, TRUE),
crate  = rgamma(N, 5, 1),    # Mean 5
ptran  = rbeta(N, 3, 7),     # Mean 0.3
prec   = rbeta(N, 10, 10)    # Mean 0.5
)
return(theta)
}
run_simulations <- function(N, n, ndays, ncores, theta, seeds,path) {
matrices <- parallel::mclapply(1:N, FUN = function(i) {
fn <- sprintf(path, i)
if (file.exists(fn))
return(readRDS(fn))
set.seed(seeds[i])
m <-  ModelSIRCONN(
"mycon",
prevalence        = theta$preval[i],
contact_rate      = theta$crate[i],
transmission_rate = theta$ptran[i],
recovery_rate     = theta$prec[i],
n                 = n
)
verbose_off(m)
run(m, ndays = ndays)
ans <- prepare_data(m)
saveRDS(ans, fn)
return(ans)
}, mc.cores = ncores)
return(matrices)
}
#'
#' @param matrices List. The list of simulation result matrices.
#' @param theta `data.table`. The parameters corresponding to the simulations.
#' @return A list containing:
#' \describe{
#'   \item{matrices}{The filtered list of matrices.}
#'   \item{theta}{The filtered parameters.}
#'   \item{N}{The updated number of simulations.}
#' }
#' @export
filter_non_null <- function(matrices, theta) {
is_not_null <- intersect(
which(!sapply(matrices, inherits, what = "error")),
which(!sapply(matrices, \(x) any(is.na(x))))
)
matrices <- matrices[is_not_null]
theta    <- theta[is_not_null, ]
return(list(matrices = matrices, theta = theta, N = length(is_not_null)))
}
library(epiworldR)
library(data.table)
library(tensorflow)
library(keras3)
prepare_data <- function(m, max_days = 50) {
err <- tryCatch({
ans <- list(
repnum    = epiworldR::plot_reproductive_number(m, plot = FALSE),
incidence = epiworldR::plot_incidence(m, plot = FALSE),
gentime   = epiworldR::plot_generation_time(m, plot = FALSE)
)
# Filling
ans <- lapply(ans, data.table::as.data.table)
# Replacing NaN and NAs with the previous value
# in each element in the list
ans$repnum[,
"avg" := data.table::nafill(.SD[[1L]], "locf"), by = "virus_id",
.SDcols = "avg"
]
ans$gentime[,
"avg" := data.table::nafill(.SD[[1L]], "locf"), by = "virus_id",
.SDcols = "avg"
]
# Filtering up to max_days
ans$repnum    <- ans$repnum[ans$repnum$date <= max_days,]
ans$gentime   <- ans$gentime[ans$gentime$date <= max_days,]
ans$incidence <- ans$incidence[as.integer(rownames(ans$incidence)) <= (max_days + 1),]
# Reference table for merging
# ndays <- epiworldR::get_ndays(m)
ref_table <- data.table::data.table(
date = 0:max_days
)
# Replace the $ with the [[ ]] to avoid the warning in the next
# two lines
ans[["repnum"]] <- data.table::merge.data.table(
ref_table, ans[["repnum"]], by = "date", all.x = TRUE
)
ans[["gentime"]] <- data.table::merge.data.table(
ref_table, ans[["gentime"]], by = "date", all.x = TRUE
)
# Generating the arrays
ans <- data.table::data.table(
infected =  ans[["incidence"]][["Infected"]],
recovered = ans[["incidence"]][["Recovered"]],
repnum    = ans[["repnum"]][["avg"]],
gentime   = ans[["gentime"]][["avg"]],
repnum_sd = ans[["repnum"]][["sd"]],
gentime_sd = ans[["gentime"]][["sd"]]
)
# Filling NAs with last obs
ans[, "infected" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "infected"]
ans[, "recovered" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "recovered"]
ans[, "repnum" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "repnum"]
ans[, "gentime" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "gentime"]
ans[, "repnum_sd" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "repnum_sd"]
ans[, "gentime_sd" := data.table::nafill(.SD[[1]], "locf"),
.SDcols = "gentime_sd"]
}, error = function(e) e)
# If there is an error, return NULL
if (inherits(err, "error")) {
return(err)
}
# Returning without the first observation (which is mostly zero)
dprep <- t(diff(as.matrix(ans[-1,])))
ans <- array(dim = c(1, dim(dprep)))
ans[1,,] <- dprep
abm_hist_feat <- ans
array_reshape(
abm_hist_feat,
dim = c(1, dim(dprep))
)
}
#
# prepare_data_infections_only <- function(m, ...) {
#   UseMethod("prepare_data_infectios_only")
# }
#
# prepare_data_infections_only.epiworld_model <- function(m, ...) {
#   ans <- epiworldR::plot_incidence(m, plot = FALSE) |>
#     data.table::as.data.table()
#
#   prepare_data_infections_only.data.table(
#     m = ans,
#     ...
#   )
# }
#
# prepare_data_infections_only.default <- function(m, max_days = 50, ...) {
#
#   err <- tryCatch({
#     ans <- list(
#       incidence = data.table(Infected=m)
#     )
#
#     # Replacing NaN and NAs with the previous value
#     # in each element in the list
#     # Filtering up to max_days
#     ans$incidence <- ans$incidence[as.integer(rownames(ans$incidence)) <= (max_days + 1),]
#
#     # Reference table for merging
#     # ndays <- epiworldR::get_ndays(m)
#     ref_table <- data.table::data.table(
#       date = 0:max_days
#     )
#
#     # Generating the arrays
#     ans <- data.table::data.table(
#       infected =  ans[["incidence"]][["Infected"]]
#     )
#
#     # Filling NAs with last obs
#     ans[, "infected" := data.table::nafill(.SD[[1]], "locf"),
#         .SDcols = "infected"]
#
#   }, error = function(e) e)
#
#   # If there is an error, return NULL
#   if (inherits(err, "error")) {
#     return(err)
#   }
#
#   # Returning without the first observation (which is mostly zero)
#   dprep <- t(diff(as.matrix(ans[-1,])))
#
#   ans <- array(dim = c(1, dim(dprep)))
#   ans[1,,] <- dprep
#   abm_hist_feat <- ans
#
#   array_reshape(
#     abm_hist_feat,
#     dim = c(1, dim(dprep))
#   )
#
# }
#' Prepare Data for TensorFlow
#'
#' @description
#' Converts a list of matrices into a 3D array suitable for TensorFlow input.
#'
#' @param matrices List. The list of simulation result matrices.
#' @param N Integer. The number of simulations.
#' @return A 3D array suitable for input into TensorFlow models.
#' @export
prepare_data_for_tensorflow <- function(matrices, N) {
arrays_1d <- array(dim = c(N, dim(matrices[[1]][1,,])))
for (i in seq_along(matrices)) {
arrays_1d[i,,] <- matrices[[i]][1,,]
}
return(arrays_1d)
}
#'
#' @param arrays Array. The 3D array prepared for TensorFlow.
#' @param theta `data.table`. The parameters corresponding to the simulations.
#' @param N Integer. The number of simulations.
#' @return A list containing:
#' \describe{
#'   \item{train}{A list with training data (`x` and `y`).}
#'   \item{test}{A list with test data (`x` and `y`).}
#' }
#' @export
split_data <- function(arrays, theta, N) {
N_train <- floor(N * 0.7)
id_train <- 1:N_train
id_test <- (N_train + 1):N
train <- list(
x = array_reshape(arrays[id_train,,], dim = c(N_train, dim(arrays)[-1])),
y = array_reshape(as.matrix(theta)[id_train,], dim = c(N_train, ncol(theta)))
)
test <- list(
x = array_reshape(arrays[id_test,,], dim = c(N - N_train, dim(arrays)[-1])),
y = array_reshape(as.matrix(theta)[id_test,], dim = c(N - N_train, ncol(theta)))
)
return(list(train = train, test = test, N_train = N_train))
}
N=2e4
n=5000
ncores=20
ndays=50
library(keras3)
library(data.table)
library(tensorflow)
# Generate theta and seeds
theta <- generate_theta(N, n)
seeds <- sample.int(.Machine$integer.max, N, TRUE)
ndays=30
# Generate theta and seeds
theta <- generate_theta(N, n)
seeds <- sample.int(.Machine$integer.max, N, TRUE)
path="~/myfisrt.package/misc/simulated_data/sir-%06i.rds"
# Run simulations
matrices <- run_simulations(N, n, ndays, ncores, theta,seeds,path)
# Filter non-null elements
filtered_data <- filter_non_null(matrices, theta)
matrices <- filtered_data$matrices
theta <- filtered_data$theta
N <- filtered_data$N
N
# Prepare data for TensorFlow
arrays_1d <- prepare_data_for_tensorflow(matrices, N)
arrays_1d
# Save theta and simulations data
theta2 <-as.data.table(copy(theta))
theta2$crate <- plogis(theta2$crate / 10)
# Split data into training and testing sets
data_split <- split_data(arrays_1d, theta2, N)
data_split
train <- data_split$train
test <- data_split$test
dim(arrays_1d)[-1]
test
test_data$x
#'
#' @param model Keras model. The trained model to be evaluated.
#' @param test_data List. A list containing test data (`x` and `y`).
#' @param theta `data.table`. The parameters corresponding to the simulations.
#' @return A list containing:
#' \describe{
#'   \item{pred}{The predicted values.}
#'   \item{MAEs}{The Mean Absolute Errors for each output variable.}
#' }
#' @export
test_data=test
test_data$x
library(myfirst.package)
data=c(1:30)
generate_theta(2e4,5000)
preprocessing_data(data)
prepare_data_infected()
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
#' Prepare Data for TensorFlow Model: Infected Cases
#'
#' @param data A numeric vector representing the number of infected cases over time (e.g., daily incidence).
#'
#' @return A reshaped array of processed data suitable for TensorFlow models. If an error occurs, it returns the error object.
#'
#' @export
prepare_data_infected <- function(data) {
if (!is.numeric(data)) {
stop("Input 'data' must be a numeric vector.")
}
max_days <- length(data)
err <- tryCatch({
# Create data.table with incidence data
ans <- list(
incidence = data.table(day = 1:length(data), Infected = data)
)
# Filter data for the valid range
ans$incidence <- ans$incidence[day <= max_days, ]
# Replace NA values with the last observed value
ans$incidence[, Infected := nafill(Infected, type = "locf")]
# Prepare array for TensorFlow
dprep <- diff(as.matrix(ans$incidence$Infected))
dprep <- t(dprep)  # Transpose to ensure correct shape
# Create a 3D array
ans_array <- array(dim = c(1, length(dprep), 1))
ans_array[1, , 1] <- dprep
# Reshape for TensorFlow
array_reshape(ans_array, dim = c(1, length(dprep), 1))
}, error = function(e) e)
if (inherits(err, "error")) {
return(err)
}
return(err)
}
prepare_data_infected(data)
library(tensorflow)
library(keras3)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
preprocessing_data(data)
max_days <- length(data)
# Create data.table with incidence data
ans <- list(
incidence = data.table(day = 1:length(data), Infected = data)
)
ans
# Filter data for the valid range
ans$incidence <- ans$incidence[day <= max_days, ]
# Replace NA values with the last observed value
ans$incidence[, Infected := nafill(Infected, type = "locf")]
ans
# Prepare array for TensorFlow
dprep <- diff(as.matrix(ans$incidence$Infected))
dprep <- t(dprep)  # Transpose to ensure correct shape
# Create a 3D array
ans_array <- array(dim = c(1, length(dprep), 1))
ans_array[1, , 1] <- dprep
# Reshape for TensorFlow
array_reshape(ans_array, dim = c(1, length(dprep), 1))
#' Prepare Data for TensorFlow Model: Infected Cases
#'
#' @param data A numeric vector representing the number of infected cases over time (e.g., daily incidence).
#'
#' @return A reshaped array of processed data suitable for TensorFlow models. If an error occurs, it returns the error object.
#'
#' @export
prepare_data_infected <- function(data) {
library(epiworldR)
library(data.table)
library(tensorflow)
library(keras3)
max_days <- length(data)
# Create data.table with incidence data
ans <- list(
incidence = data.table(day = 1:length(data), Infected = data)
)
# Filter data for the valid range
ans$incidence <- ans$incidence[day <= max_days, ]
# Replace NA values with the last observed value
ans$incidence[, Infected := nafill(Infected, type = "locf")]
# Prepare array for TensorFlow
dprep <- diff(as.matrix(ans$incidence$Infected))
dprep <- t(dprep)  # Transpose to ensure correct shape
# Create a 3D array
ans_array <- array(dim = c(1, length(dprep), 1))
ans_array[1, , 1] <- dprep
# Reshape for TensorFlow
array_reshape(ans_array, dim = c(1, length(dprep), 1))
}
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
preprocessing_data(data)
# Call prepare_data_infected
ans <- list(prepare_data_infected(data))
ans
# Debugging: Check if 'ans' is valid
if (is.null(ans[[1]]) || inherits(ans[[1]], "error")) {
stop("Error in prepare_data_infected: The data could not be prepared.")
}
# Call filter_non_null_infected
filtered_data <- filter_non_null_infected(ans)
# Debugging: Check if filtered_data is valid
if (is.null(filtered_data$matrices) || length(filtered_data$matrices) == 0) {
stop("Error in filter_non_null_infected: No valid matrices found.")
}
# Unlist and reshape matrices
matr <- unlist(filtered_data$matrices)
# Debugging: Check if matr is valid
if (is.null(matr) || length(matr) == 0) {
stop("Error: Unlisted matrices are NULL or empty.")
}
# Convert to matrix
data2 <- as.vector(matr)
matrix_a <- as.matrix(data2, ncol = 1)  # Ensure it's reshaped correctly
matrix_a
preprocessing_data(data)
prepare_data_infected(data)
filter_non_null_infected(data)
data=c(1:30)
library(myfirst.package)
library(myfirst.package)
data=c(1:30)
prepare_data_infected(data)
library(myfirst.package)
library(myfirst.package)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data,1:30)
library(myfirst.package)
prepare_data_infected(data,1:30)
library(myfirst.package)
prepare_data_infected(data)
preprocessing_data(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
library(myfirst.package)
prepare_data_infected(data)
preprocessing_data(data)
devtools::load_all(".")
library(myfirst.package)
detach("package:myfirst.package", unload = TRUE)
rm(prepare_data)
rm(prepare_data_infected)
devtools::load_all(".")
preprocessing_data(data)
devtools::load_all(".")
preprocessing_data(data)
devtools::load_all(".")
preprocessing_data(data)
?usethis::use_vignette
library(epiworldRcalibrate)
